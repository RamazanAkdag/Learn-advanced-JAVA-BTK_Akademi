package com.javacourse.project.hibernateAndJpa.DataAccess;

import java.util.List;

import org.hibernate.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.javacourse.project.hibernateAndJpa.Entities.City;


import jakarta.persistence.EntityManager;

@Repository
public class HibernateCityDal implements ICityDal{
	
	private EntityManager entityManager;

	@Autowired
	public HibernateCityDal(EntityManager entityManager) {
		
		this.entityManager = entityManager;
	}
	
	//begin ve commit işlemlerini bizim yerimize yapmaası için spring ile beraber gelen transactional
	//anotasyonunu kullanacağız
	//AOP --> Aspect Oriented Programming
	@Override
	@Transactional
	public List<City> getAll() {
		
		Session session=entityManager.unwrap(Session.class);//bir hibernate session oluşturuyor
		//bu session kullanılarak veritabanındaki  nesneleri getireceğiz
		//session.beginTransaction();//işlem başlat
		List<City> cities = session.createQuery("from City",City.class).getResultList();
		
		/*for(City city:cities) {
			System.out.println(city.getName());
		}
		*/
		
		return cities;
	}

	@Override
	@Transactional
	public void add(City city) {
		Session session=entityManager.unwrap(Session.class);
		session.saveOrUpdate(city);
		
	}

	@Override
	public void update(City city) {
	
		Session session=entityManager.unwrap(Session.class);
		session.saveOrUpdate(city);
	}

	@Override
	public void delete(City city) {
		Session session=entityManager.unwrap(Session.class);
		City cityToDelete= session.get(City.class, city.getID());
		session.delete(cityToDelete);;
		
	}
	@Override
	public City getById(int id) {
		Session session=entityManager.unwrap(Session.class);
		City city =  session.get(City.class, id);
		return city;
	}

}
